<?php

namespace App\Http\Controllers\API;

use App\Appointment;
use App\Driver;
use App\DriverLocation;
use App\BookDecline;
use App\DriverVehicle;
use App\PaymentRequest;
use App\DriverRating;
use App\VehicleType;
use App\VehicleMake;
use App\VehicleModel;
use App\Comment;
use App\DriverBank;
use App\DocumentState;
use App\Document;
use App\DriverDocument;
use App\Feedback;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Auth;
use Illuminate\Support\Facades\Hash;

class DriverController extends Controller
{
    public function onlineDriver(Request $request){
        $id = Auth::guard('apidriver')->user()->id;
        // Get POST data
        $lat = $request->lat;
        $lng = $request->lng;

        $rl = DriverLocation::where('driverId', $id)->first();
        if($rl)
        {
            $rl->lat = $lat;
            $rl->lng = $lng;
            $rl->save();
        }
        else
        {
            DriverLocation::create([
                'driverId' => $id,
                'lat' => $lat,
                'lng' => $lng,
            ]);
        }
        return response()->json([
            'status' => 1,
            'message' => 'Store your location into our system.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }

    public function offlineDriver(){
        $id = Auth::guard('apidriver')->user()->id;
        DriverLocation::where('driverId', $id)->delete();
        return response()->json([
            'status' => 1,
            'message' => 'You are released from our obseverablity.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }

    public function getDriverInfo(){
        $driver = Auth::guard('apidriver')->user();
        return response()->json([
            'status' => 1,
            'message' => 'Driver personal info.',
            'datetime' => date('Y-m-d H:i'),
            'data' => $driver
        ]);
    }

    public function putProfileInfo(Request $request){
        $id = Auth::guard('apidriver')->user()->id;
        $validator = Validator::make($request->all(), [
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
        ]);
        if ($validator->fails()) {
            return response()->json([
                'status' => 0,
                'message' => $validator->errors(),
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }

        $driver = Driver::find($id);
        $driver->update($request->all());

        return response()->json([
            'status' => 1,
            'message' => 'Driver profile updated.',
            'datetime' => date('Y-m-d H:i'),
            'data' => $driver
        ]);
    }

    public function updateDevice(Request $request){
        $driver = Driver::find(Auth::guard('apidriver')->user()->id);
        $driver->device_type = $request->device_type;
        $driver->device_token = $request->device_token;
        $driver->update();

        return response()->json([
            'status' => 1,
            'message' => 'Device information has been updated.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }

    public function acceptBook($book_id)
    {
        $ride = Appointment::find($book_id);
        $ride->driver_id = Auth::guard('apidriver')->user()->id;
        $ride->status = 1;
        $ride->start_time = date('Y-m-d H:m:s');
        $ride->save();
        return response()->json([
            'status' => 1,
            'message' => 'Accepted',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }

    public function declineBook(Request $request, $book_id, $driver)
    {
      
      $BookDecline = new BookDecline;
      $BookDecline->booking_id = $book_id;
      $BookDecline->driver_id = (int)$driver;
      $BookDecline->declineBy = $request->declineBy;
      $BookDecline->save();
      
        // remove this deriver from queue of this ride
        return response()->json([
            'status' => 1,
            'message' => 'Declined',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }


    public function cancelBook(Request $request, $book_id)
    {
        $reason = $request->reason;
        $ride = Appointment::find($book_id);
        $ride->status = 2;
        $ride->cancel_reason = $reason;
        $ride->save();
        return response()->json([
            'status' => 1,
            'message' => 'Cancelled.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }

    public function endBook(Request $request, $book_id)
    {
        $path = $request->travel_path;
        $ride = Appointment::find($book_id);
        $ride->status = 3;
        $ride->travel_path = $path;
        $ride->end_time = date('Y-m-d H:m:s');
        $ride->save();

        return response()->json([
            'status' => 1,
            'message' => 'Success.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);
    }
    
    	//change password
  	public function changePassword(Request $request){
      	$id = Auth::guard('apidriver')->user()->id;
        
        $validator = Validator::make($request->all(), [            
            'new_password' => 'required|min:6',
            'confirm_password' => 'required|min:6',
        ]);
        if($validator->fails())
        {
            return response()->json(['status' => 0, 'message' => $validator->errors()->first()]);
        }      
      	
	    $new = $request->new_password;
	    $confirm = $request->confirm_password;      
      	$driver = Driver::find($id);
      	if($new == $confirm){
          $driver->password = Hash::make($new);
          $driver->save();
          
        }else{
          //return redirect()->back()->withInput()->withErrors('Your password and confirmation password do not match.');
          return response()->json(['status' => 0, 'message' => 'Your password and confirmation password do not match.']);
        }
      
      	return response()->json(['status' => 1, 'message' => 'Password Updated', 'data' => $driver]);
    }//end of fun
  
  	public function getBookingforDriver()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;        
       
        //$bookings = Appointment::where('status','0')->where('driver_id',$driver_id)->first();
        $BookDecline = new BookDecline;
    	$bookings = $BookDecline->getnotDeclineRide($driver_id);
       
       if($bookings){
          
        return response()->json([
            'status' => 1,
            'message' => 'Driver Booking',
            'datetime' => date('Y-m-d H:i:s'),
            'data' => $bookings
        ]);
        }else{
         
         return response()->json([
            'status' => 0,
            'message' => 'Driver Booking Not found',
            'datetime' => date('Y-m-d H:i:s'),
            'data' => null
            ]);
       }
     
       
	    /*if($recordfound == 1){
           return response()->json([
            'status' => 1,
            'message' => 'Driver Booking',
            'datetime' => date('Y-m-d H:i'),
            'data' => $booknew
        ]);
        }else{
           return response()->json([
            'status' => 0,
            'message' => 'Driver Booking Not found',
            'datetime' => date('Y-m-d H:i'),
            'data' => $booknew
        ]);
        }
        */
       
        
    }
  
  public function getdriverVeh($driver_id = 0){
    //$id = Auth::guard('apidriver')->user()->id;
    if($driver_id > 0){
      //->groupBy('driver_vehicles.driver_id','driver_vehicles.id')
      $driveveh = DriverVehicle::select('driver_vehicles.*','vehicle_makes.name as makename','vehicle_models.name as modelname')
       ->leftJoin('vehicle_makes', 'vehicle_makes.id', '=','driver_vehicles.make_id') 
       ->leftJoin('vehicle_models', 'vehicle_models.id', '=','driver_vehicles.model_id') 
        ->where('driver_id',$driver_id)
       
        ->first();
      return response()->json([
            'status' => 1,
            'message' => 'Driver Vehcile Info',
            'datetime' => date('Y-m-d H:i'),
            'data' => $driveveh
         ]);
    }else{

         return response()->json([
            'status' => 0,
            'message' => 'Driver Booking Not found',
            'datetime' => date('Y-m-d H:i'),
             'data' => null
         ]);
    }
  }
  
  	public function getDriverEarning()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;        
       
        $bookings = Appointment::join('users','users.id','=','appointments.rider_id')
          ->where('appointments.status','3')
          ->where('driver_id',$driver_id)
          ->orderBy('appointments.id', 'DESC')
          ->limit(10)
          ->get(['appointments.*', 'users.avatar']);
      
      	$grantAmt = 0;
      	foreach($bookings as $k => $item){
          $bookings[$k]['bookingDate'] = date('d/m/Y h:i A',strtotime($item['created_at']));
          $bookings[$k]['totalAmt'] = ($item['payment_total'] + $item['payment_tip']);
          $bookings[$k]['totalAmt'] = number_format($bookings[$k]['totalAmt'],2);
          $grantAmt = $grantAmt + $bookings[$k]['totalAmt'];
          $bookings[$k]['payment_total1'] = number_format($item['payment_total'],2);
          $bookings[$k]['payment_tip1'] = number_format($item['payment_tip'],2);
          $bookings[$k]['rating'] = $this->getRiderRatingForFun($item['rider_id']);
        }

        $grantAmt = number_format($grantAmt,2);
      
      
       
       if($bookings){          
          return response()->json([
              'status' => 1,
              'message' => 'Driver Earning Data',
              'grantAmt' => $grantAmt,	
              'datetime' => date('Y-m-d H:i:s'),
              'data' => $bookings
          ]);
        }else{         
         	return response()->json([
              'status' => 0,
              'message' => 'Records Not found',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => null
            ]);
       	}
        
    }//end of fun
  
  	/**
     * Driver is able to give the rate, feedback to the rider
     * @params - rate, feedback
     * @response - JSON object
     */
    public function feedbackTrip(Request $request, $book_id)
    {
        // Driver feedback
        $book = Appointment::find($book_id);
        $feedback = new DriverRating();
        $feedback->book_id = $book_id;
        $feedback->driver_id = $book->driver_id;
        $feedback->rider_id = $book->rider_id;
        $feedback->rating = $request->rate;
        if($request->comment != ''){
            $feedback->comment = $request->comment;
        }
        $feedback->status = 0;
        $feedback->save();

        return response()->json([
            'status' => 1,
            'message' => 'Your feedback was submitted.',
            'datetime' => date('Y-m-d H:i'),
            'data' => $book
        ]);
    }//end of fun
  
  	/**
     * Check booking is cancel or not
     * @params - book_id
     * @response - JSON object
     */
  	public function checkTripStatus($book_id)
    {
      $book = Appointment::find($book_id,['status','cancel_reason']);
      //$book = Appointment::select('status')->where('id',$book_id)->first();      
      
      return response()->json([
            'status' => 1,        	
            'message' => 'Book status.',
            'datetime' => date('Y-m-d H:i'),
            'bookStatus' => $book->status,
            'reason' => $book->cancel_reason
        ]);
      
    }//end of fun
  
  	/**
     * Get driver services
     * @params - $driver_id
     * @response - JSON object
     */
  	public function getDriverServices($driver_id)
    {
    	$driveVehicle = DriverVehicle::where('driver_id',$driver_id)->first();
        
        $serviceTypes = VehicleType::where('status', 1)->get();

        if($driveVehicle['servicetype_id']){
            foreach($serviceTypes as $key => $val){
                if (strpos($driveVehicle['servicetype'], $val['name']) !== false) {
                    $serviceTypes[$key]['selected'] = 1;
                }else{
                    $serviceTypes[$key]['selected'] = 0;
                }
            }
        }

      
        return response()->json([
          'status' => 1,
          'message' => 'Driver Vehcile Info',
          'datetime' => date('Y-m-d H:i'),
          'data' => $serviceTypes
        ]);
    
    }//end of fun

    /**
     * update driver services
     * @params - request service ids comma separeted ,$driver_id
     * @response - JSON object
     */
    public function updateDriverServices(Request $request, $driver_id)
    {        
        $servicetype_id = rtrim($request->servicetype_id, ',');

        $driveVehicle = DriverVehicle::where('driver_id',$driver_id)->update(
            ['servicetype_id' => $servicetype_id]
        );
        
        return response()->json([
          'status' => 1,
          'message' => 'Driver services updated',
          'datetime' => date('Y-m-d H:i'),
        ]);
    
    }//end of fun

    /**
     * get rider rating by rider_id
     * @params - rider_id
     * @response - JSON object
     */
    public function getRiderRating($rider_id)
    {
        $count = DriverRating::where('rider_id',$rider_id)->get()->count();
        $sum = DriverRating::where('rider_id',$rider_id)->sum('rating');
        if($count > 0)
            $rating = number_format($sum/$count,1);
        else
            $rating = 0.0;
        return response()->json([
          'status' => 1,
          'message' => 'Rider rating',
          'datetime' => date('Y-m-d H:i'),
          'data' => $rating
        ]);

    }//end of fun

    /**
     * Get latest Appointment data.
     * @params - book_id
     * @response - JSON object
     */
    public function getAppointmentData($book_id)
    {
      $book = Appointment::find($book_id);      
      
      return response()->json([
            'status' => 1,          
            'message' => 'Book status.',
            'datetime' => date('Y-m-d H:i'),
            'data' => $book
        ]);
      
    }//end of fun

    /**
     * get rider rating by rider_id
     * @params - rider_id
     * @response - JSON object
     */
    public function getRiderRatingForFun($rider_id)
    {
        $count = DriverRating::where('rider_id',$rider_id)->get()->count();
        $sum = DriverRating::where('rider_id',$rider_id)->sum('rating');
        if($count > 0)
            $rating = number_format($sum/$count,1);
        else
            $rating = 0.0;

        return $rating;
    }//end of fun

    public function completedTrip()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;

        $bookings = Appointment::join('users','users.id','=','appointments.rider_id')
          ->where('appointments.status','3')
          ->where('driver_id',$driver_id)
          ->orderBy('appointments.id', 'DESC')
          ->limit(10)
          ->get(['appointments.*', 'users.avatar']);
      
        
        foreach($bookings as $k => $item){
          $bookings[$k]['bookingDate'] = date('d/m/Y h:i A',strtotime($item['created_at']));
          $bookings[$k]['totalAmt'] = ($item['payment_total'] + $item['payment_tip']);
          $bookings[$k]['totalAmt'] = number_format($bookings[$k]['totalAmt'],2);
          $bookings[$k]['payment_total1'] = number_format($item['payment_total'],2);
          $bookings[$k]['payment_tip1'] = number_format($item['payment_tip'],2);
          $bookings[$k]['rating'] = $this->getRiderRatingForFun($item['rider_id']);
        }
       
        if($bookings){          
          return response()->json([
              'status' => 1,
              'message' => 'Driver completed Data',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => $bookings
          ]);
        }else{         
            return response()->json([
              'status' => 0,
              'message' => 'Records Not found',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => null
            ]);
        }

    }//end of fun

    public function canceledTrip()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;

        $bookings = Appointment::join('users','users.id','=','appointments.rider_id')
          ->where('appointments.status','2')
          ->where('driver_id',$driver_id)
          ->orderBy('appointments.id', 'DESC')
          ->limit(10)
          ->get(['appointments.*', 'users.avatar']);
      
        
        foreach($bookings as $k => $item){
          $bookings[$k]['bookingDate'] = date('d/m/Y h:i A',strtotime($item['created_at']));
          $bookings[$k]['totalAmt'] = ($item['payment_total'] + $item['payment_tip']);
          $bookings[$k]['totalAmt'] = number_format($bookings[$k]['totalAmt'],2);
          $bookings[$k]['payment_total1'] = number_format($item['payment_total'],2);
          $bookings[$k]['payment_tip1'] = number_format($item['payment_tip'],2);
          $bookings[$k]['rating'] = $this->getRiderRatingForFun($item['rider_id']);
        }
       
        if($bookings){          
          return response()->json([
              'status' => 1,
              'message' => 'Driver completed Data',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => $bookings
          ]);
        }else{         
            return response()->json([
              'status' => 0,
              'message' => 'Records Not found',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => null
            ]);
        }

    }//end of fun

    public function upcomingTrip()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;

        $bookings = Appointment::join('users','users.id','=','appointments.rider_id')
          ->where('appointments.status','0')
          ->where('driver_id',$driver_id)
          ->where('is_current','0')
          ->orderBy('appointments.id', 'DESC')
          ->limit(10)
          ->get(['appointments.*', 'users.avatar']);
      
        
        foreach($bookings as $k => $item){
          $bookings[$k]['bookingDate'] = date('d/m/Y h:i A',strtotime($item['created_at']));
          $bookings[$k]['totalAmt'] = ($item['payment_total'] + $item['payment_tip']);
          $bookings[$k]['totalAmt'] = number_format($bookings[$k]['totalAmt'],2);
          $bookings[$k]['payment_total1'] = number_format($item['payment_total'],2);
          $bookings[$k]['payment_tip1'] = number_format($item['payment_tip'],2);
          $bookings[$k]['rating'] = $this->getRiderRatingForFun($item['rider_id']);
        }
       
        if($bookings){          
          return response()->json([
              'status' => 1,
              'message' => 'Driver completed Data',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => $bookings
          ]);
        }else{         
            return response()->json([
              'status' => 0,
              'message' => 'Records Not found',
              'datetime' => date('Y-m-d H:i:s'),
              'data' => null
            ]);
        }

    }//end of fun

    public function vehicleDetails()
    {
        $driver_id = Auth::guard('apidriver')->user()->id;

        $driveVehicle = DriverVehicle::where('driver_id',$driver_id)->first();        
        
        $vehicleMake = VehicleMake::find($driveVehicle->make_id);

        $vehicleModel = VehicleModel::find($driveVehicle->model_id);

        if($vehicleMake){
            $driveVehicle->make_name = $vehicleMake->name;
            $driveVehicle->make_image = $vehicleMake->image;
        }
        if($vehicleModel){
            $driveVehicle->model_name = $vehicleModel->name;
        }

        if($driveVehicle){
            return response()->json([
                'status' => 1,
                'message' => 'Driver Vehicle Details',
                'datetime' => date('Y-m-d H:i:s'),
                'data' => $driveVehicle,                
            ]);
        }else{
            return response()->json([
                'status' => 0,
                'message' => 'Driver Vehicle Details Not found',
                'datetime' => date('Y-m-d H:i:s'),
                'data' => null
            ]);
        }
        
    }//end of fun

    public function updateVehicleDetails(Request $request, $vehicle_id)
    {
        
        $validator = Validator::make($request->all(), [
            'make_id' => 'required',
            'model_id' => 'required',
            'plate' => 'required',
            'color' => 'required',
            'year' => 'required',
        ]);
        if ($validator->fails()) {
            return response()->json([
                'status' => 0,
                'message' => $validator->errors(),
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }

        $vehicle = DriverVehicle::find($vehicle_id);
        $vehicle->make_id = $request->make_id;
        $vehicle->model_id = $request->model_id;
        $vehicle->plate = $request->plate;
        $vehicle->color = $request->color;
        $vehicle->year = $request->year;
        $vehicle->update();

        return response()->json([
            'status' => 1,
            'message' => 'Vehicle information has been updated.',
            'datetime' => date('Y-m-d H:i'),
            'data' => null
        ]);

    }//end of fun

    //function used to save data for comments made by driver
    public function driverComments(Request $request)
    {
        $driver_id = Auth::guard('apidriver')->user()->id;
        $commentDataGet = $request->commentData;

        $comm = new Comment();        
        $comm->content = $commentDataGet;
        $comm->is_publish = 0;
        $comm->driver_id = $driver_id;

        $comm->created_at = date('Y-m-d H:i:s');
        $comm->updated_at = date('Y-m-d H:i:s');
       
        if($comm->save()){
            return response()->json([
                'status' => 1,
                'message' =>  "Comment saved successfully!",
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }else{         
            return response()->json([
                'status' => 0,
                'message' => "Error saving " ,
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }
    }//end of fun

    
    /**
    * Update driver prifile image
    * @params - $_FILES array
    * @response - JSON object
    * @call from UploadImage.js
    */
    public function updateProfileImage(Request $request, $driver_id){
        
        /*$driver_id = Auth::guard('apidriver')->user()->id;
        return response()->json([
                'status' => 0,
                'message' =>  "Error in Image upload!",
                'datetime' => date('Y-m-d H:i'),
                'data' => $driver_id
            ]);*/
        if(isset($_FILES)){
            $file_name = time();
            $file_name .= rand();
            $file_name = sha1($file_name);
            $base = base_path();
            $filepath = "uploads/user/driver/".$file_name;
            $fileExtension = pathinfo($_FILES['photo']['name'], PATHINFO_EXTENSION);
            $pathwitext =  $base.'/'.$filepath.".".$fileExtension;
            move_uploaded_file($_FILES['photo']['tmp_name'],$pathwitext);
            //$avtar = upload_file($_FILES, 'user/rider');
            
            $driver = Driver::find($driver_id);
            $driver->avatar = $filepath.".".$fileExtension;
            $driver->save();

            return response()->json([
                'status' => 1,
                'message' =>  "Image uploaded successfully!",
                'datetime' => date('Y-m-d H:i'),
                'data' => $driver
            ]);
        }else{
            return response()->json([
                'status' => 0,
                'message' =>  "Error in Image upload!",
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }

    }//end of fun

    /**
    * Update driver ABN
    * @params - ABN $request
    * @response - JSON object
    * @call from Abn.js
    */
    public function driverAbn(Request $request){
        $driver_id = Auth::guard('apidriver')->user()->id;

        $driver = Driver::find($driver_id);
        $driver->abn = $request->abn;
        $driver->save();

        return response()->json([
            'status' => 1,
            'message' =>  "Your ABN successfully submited!",
            'datetime' => date('Y-m-d H:i'),
            'data' => $driver
        ]);

    }//end of fun
    
    /**
    * Update driver Bank detail
    * update if exist, insert in not exits
    * @params - Bank $request
    * @response - JSON object
    * @call from Bank.js
    */
    public function driverBank(Request $request)
    {
        $driver_id = Auth::guard('apidriver')->user()->id;

        $bsb_number = $request->bsb_number;
        $bank_name = $request->bank_name;
        $bank_account_number = $request->bank_account_number;
        $bank_account_title = $request->bank_account_title;
        $bank_address = $request->bank_address;
        $bank_city = $request->bank_city;
        $bank_postal_code = $request->bank_postal_code;
        $dob = $request->dob;

        $bank = DriverBank::where('driver_id', $driver_id)->first();
        if($bank){
            $bank->bsb_number = $bsb_number;
            $bank->bank_name = $bank_name;
            $bank->bank_account_number = $bank_account_number;
            $bank->bank_account_title = $bank_account_title;
            $bank->bank_address = $bank_address;
            $bank->bank_city = $bank_city;
            $bank->bank_postal_code = $bank_postal_code;
            $bank->dob = $dob;
            $bank->save();        
        }else{
            $bank = new DriverBank;
            $bank->driver_id = $driver_id;
            $bank->bsb_number = $bsb_number;
            $bank->bank_name = $bank_name;
            $bank->bank_account_number = $bank_account_number;
            $bank->bank_account_title = $bank_account_title;
            $bank->bank_address = $bank_address;
            $bank->bank_city = $bank_city;
            $bank->bank_postal_code = $bank_postal_code;
            $bank->dob = $dob;
            $bank->save();
        }
        return response()->json([
            'status' => 1,
            'message' => 'Store your bank details into our system.',
            'datetime' => date('Y-m-d H:i'),
            'data' => $bank
        ]);

    }//end of fun

    
    /**
    * Get driver Bank detail    
    * @params - Bank $request
    * @response - JSON object    
    * @call from Bank.js
    */
    public function getDriverBank(Request $request)
    {
        $driver_id = Auth::guard('apidriver')->user()->id;
        
        $bank = DriverBank::where('driver_id', $driver_id)->first();
        
        if($bank){
            return response()->json([
                'status' => 1,
                'message' => 'Bank details',
                'datetime' => date('Y-m-d H:i'),
                'data' => $bank
            ]);
        }else{
            return response()->json([
                'status' => 0,
                'message' => 'Bank details not found',
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }
    }//end of fun

    
    /**
    * Get driver document list by state
    * @params - state_id
    * @response - JSON object    
    * @call from Documents.js
    */
    public function getDocuments(Request $request)
    {
        $driver = Auth::guard('apidriver')->user();

        $result=[];

        $documentstate = DocumentState::where('state_id',$driver->state_id)->first();
        if($documentstate){
            $documents = Document::whereIn('id', explode(',', $documentstate->document_ids))->get();
            foreach($documents as $index => $document){
                $result[$index] = [];
                $result[$index]['document_id'] = $document->id;
                $result[$index]['document_name'] = $document->name;
                $driver_document = DriverDocument::where('driver_id', $driver->id)->where('document_id', $document->id)->first();
                if($driver_document){
                    $result[$index]['document_url'] = $driver_document->document_url;

                    if($result[$index]['document_url']){
                        $result[$index]['document_url'] = 'https://turvy.net/'.$result[$index]['document_url'];
                    }

                    $result[$index]['document_expire_date'] = $driver_document->expiredate;
                }else{
                    $result[$index]['document_url'] = '';
                    $result[$index]['document_expire_date'] = '';
                }
            }
        }

        return response()->json([
            'status' => 1,
            'message' => 'Bank details',
            'datetime' => date('Y-m-d H:i'),
            'data' => $result
        ]);

    }//end of fun

    
    /**
    * Get driver document list by state
    * @params - state_id
    * @response - JSON object    
    * @call from Documents.js
    */
    public function updateDocuments(Request $request, $document_id)
    {
        $driver = Auth::guard('apidriver')->user();

        $driver_document = DriverDocument::where('driver_id', $driver->id)->where('document_id', $document_id)->first();

        if($driver_document){
            $driver_document->expiredate = $request->document_expire_date;
            $driver_document->save(); 
        }else{
            $driver_document = new DriverDocument;            
            $driver_document->expiredate = $request->document_expire_date;
            $driver_document->driver_id = $driver->id;
            $driver_document->document_id = $document_id;
            $driver_document->save(); 
        }

        return response()->json([
            'status' => 1,
            'message' => 'Bank details',
            'datetime' => date('Y-m-d H:i'),
            'data' => $driver_document
        ]);

    }//end of fun

    
    /**
    * Get driver document list by state
    * @params - state_id
    * @response - JSON object    
    * @call from Documents.js
    */
    public function updateDriverDocuments(Request $request, $document_id, $driver_id)
    {
        

        if(isset($_FILES)){
            $file_name = time();
            $file_name .= rand();
            $file_name = sha1($file_name);
            $base = base_path();
            $filepath = "uploads/document/".$file_name;
            $fileExtension = pathinfo($_FILES['document']['name'], PATHINFO_EXTENSION);
            $pathwitext =  $base.'/'.$filepath.".".$fileExtension;
            move_uploaded_file($_FILES['document']['tmp_name'],$pathwitext);            

            $driver_document = DriverDocument::where('driver_id', $driver_id)->where('document_id', $document_id)->first();

            if($driver_document){
                $driver_document->document_url = $filepath.".".$fileExtension;
                $driver_document->save(); 
            }else{
                $driver_document = new DriverDocument;            
                $driver_document->document_url = $filepath.".".$fileExtension;
                $driver_document->driver_id = $driver_id;
                $driver_document->document_id = $document_id;
                $driver_document->save(); 
            }

            return response()->json([
                'status' => 1,
                'message' =>  "Document uploaded successfully!",
                'datetime' => date('Y-m-d H:i'),
                'data' => $driver_document
            ]);
        }else{
            return response()->json([
                'status' => 0,
                'message' =>  "Error in Image upload!",
                'datetime' => date('Y-m-d H:i'),
                'data' => null
            ]);
        }
    }//end of fun

    public function putSupport(Request $request){
        
        $user = Auth::guard('apidriver')->user();
        $record = new Feedback();
        $record->name = $user->first_name.' '.$user->last_name;
        $record->email = $user->email;
        $record->mobile = $user->mobile;
        $record->driver_id = $user->id;
        $record->content = $request->get('query');
        $res = $record->save();
        if($res){
                return response()->json([
               'status' => 1,
               'message' => 'Query Successfully Submitted!',
               'datetime' => date('Y-m-d H:i'),
               'data' => null,
            ]);        
        }else{
                return response()->json([
               'status' => 1,
               'message' => 'Error submitting Query !',
               'datetime' => date('Y-m-d H:i'),
               'data' => null,
            ]);      
        }        
    }//end of fun
    
}
